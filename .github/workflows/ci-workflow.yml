name: Pull Request

on:
  pull_request:
    branches:
      - main
      - dev
      - stg
    paths:
      - 'infrastructure/**'  

permissions:
      id-token: write
      issues: write
      pull-requests: write
      contents: read
jobs: 
  pr-infra-check:
    runs-on: ubuntu-latest
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      
    # Log into Azure with OIDC integration
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Service Principal Secret from Key Vault
      id: get-sp-secret
      run: |
        AZURE_CLIENT_SECRET=$(az keyvault secret show --name e47b7e57-e1b4-4cce-9215-80e9539ebcdd --vault-name dev-kv-0101984 --query value -o tsv)
        echo "ARM_CLIENT_SECRET=${AZURE_CLIENT_SECRET}" >> $GITHUB_ENV

    # Run az commands to confirm sub access
    - name: 'Run az commands'
      run: |
        az account show

    # Run Terraform init
    - name: Terraform Init
      id: init
      working-directory: infrastructure
      env:
        STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
        CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"

    # Run a Terraform fmt
    - name: Terraform format
      id: fmt
      working-directory: infrastructure
      run: terraform fmt -check

    # Run a Terraform validate
    - name: Terraform validate
      id: validate
      working-directory: infrastructure
      if: success() || failure()
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform validate -no-color

    # Run a Terraform plan
    - name: Terraform plan
      id: plan
      working-directory: infrastructure
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        GITHUB_REF_NAME: ${{ github.ref }}
      run:
         BRANCH_NAME=$(echo $GITHUB_REF_NAME | awk -F'/' '{print $3}')
         terraform plan -no-color -var-file=environments/${BRANCH_NAME}/terraform.tfvars
      # run: terraform plan -no-color -var-file=environments/dev/terraform.tfvars

    # Add a comment to pull requests with plan results
    - name: Add Plan Comment
      id: comment
      uses: actions/github-script@v6
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })